// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	entity "todo/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockTodo is a mock of Todo interface.
type MockTodo struct {
	ctrl     *gomock.Controller
	recorder *MockTodoMockRecorder
}

// MockTodoMockRecorder is the mock recorder for MockTodo.
type MockTodoMockRecorder struct {
	mock *MockTodo
}

// NewMockTodo creates a new mock instance.
func NewMockTodo(ctrl *gomock.Controller) *MockTodo {
	mock := &MockTodo{ctrl: ctrl}
	mock.recorder = &MockTodoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodo) EXPECT() *MockTodoMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodo) CreateTodo(todo *entity.Todo) (int, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", todo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoMockRecorder) CreateTodo(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodo)(nil).CreateTodo), todo)
}

// DeleteTodo mocks base method.
func (m *MockTodo) DeleteTodo(todoId, userId int) (error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", todoId, userId)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoMockRecorder) DeleteTodo(todoId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodo)(nil).DeleteTodo), todoId, userId)
}

// GetTodo mocks base method.
func (m *MockTodo) GetTodo(todoId, userId int) (*entity.TodoGetRes, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", todoId, userId)
	ret0, _ := ret[0].(*entity.TodoGetRes)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoMockRecorder) GetTodo(todoId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodo)(nil).GetTodo), todoId, userId)
}

// GetTodos mocks base method.
func (m *MockTodo) GetTodos(userId int) ([]entity.TodoGetRes, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", userId)
	ret0, _ := ret[0].([]entity.TodoGetRes)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoMockRecorder) GetTodos(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodo)(nil).GetTodos), userId)
}

// UpdateTodo mocks base method.
func (m *MockTodo) UpdateTodo(todo *entity.TodoUpdateReq) (*entity.TodoUpdateRes, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", todo)
	ret0, _ := ret[0].(*entity.TodoUpdateRes)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoMockRecorder) UpdateTodo(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodo)(nil).UpdateTodo), todo)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockAuth) GenerateAccessToken(userId int, role string) (string, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", userId, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAuthMockRecorder) GenerateAccessToken(userId, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAuth)(nil).GenerateAccessToken), userId, role)
}

// GenerateRefreshToken mocks base method.
func (m *MockAuth) GenerateRefreshToken(userId int, role string) (string, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", userId, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockAuthMockRecorder) GenerateRefreshToken(userId, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockAuth)(nil).GenerateRefreshToken), userId, role)
}

// GenerateTokens mocks base method.
func (m *MockAuth) GenerateTokens(userId int, role string) (entity.TokensRes, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", userId, role)
	ret0, _ := ret[0].(entity.TokensRes)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockAuthMockRecorder) GenerateTokens(userId, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockAuth)(nil).GenerateTokens), userId, role)
}

// Login mocks base method.
func (m *MockAuth) Login(user *entity.UserLoginReq) (entity.TokensRes, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(entity.TokensRes)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockAuthMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuth)(nil).Login), user)
}

// Register mocks base method.
func (m *MockAuth) Register(user *entity.UserRegisterReq) (entity.TokensRes, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(entity.TokensRes)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register.
func (mr *MockAuthMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuth)(nil).Register), user)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockUser) GetAllUsers() ([]entity.User, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUser)(nil).GetAllUsers))
}
